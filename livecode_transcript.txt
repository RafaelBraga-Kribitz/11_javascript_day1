Alright. So we have spent some time with HTML and CSS. We know that HTML gives us the structure of the page, and CSS helps us, style it and make it beautiful. But so far with HTML and CSS only, everything has been static. Right? It just sit there, and it looks pretty. Today, as you saw it from the presentation, we are going to start with JavaScript, which is a programming language that will help, make the web pages interactive. For example, responding, when someone clicks a button or creating pop ups, animations, and many more. Of course, we will not learn everything today, so no stress. As mentioned, we will only cover some of the basic. So we will start slow and then gradually build up from there. So before, starting, like, think again how I, find it easier to, keep it on mind. I think of it like this. HTML is the structure, CSS is the design, and JavaScript will be the brain that will help you do certain things. Okay? And, yeah, just a short introduction about the JavaScript because, it's important to know that it has gone through several different version and updates over the years. And, with newer version, they they also bring, like, more features and improvement. And one of the biggest updates of, JavaScript is the ECMAScript 6 or ES 6. You might hear it you might hear us, say it, which actually introduced many powerful new tools to the language. Of course, we will cover some of the ES 6 features today, and we will actually explore more in the upcoming days. But I just let you know, about this information because some, you might find it in some of the older code that they have used different approach, but with e s 6, there are improvements.

And we usually also in this course, we teach you how to use the e s 6 features. So we focus more on those. But I will also let you know how it was, before. Okay. So we will start by setting up our environment first. And, basically, there are 2 ways of including JavaScript code in the page. First one is known as internal, and the second one is known as external. Let's see. 1st, I will show you how to include it internally, and then we will take the other example. So in here, I got a simple HTML HTML boilerplate and basically nothing inside it. In order to have JavaScript in here, we need to go right before the closing body tag and open the script tags like this. And then in here, I will simply use an alert, which is a function, and I will try to say something like this. I will try to open this with live server here. And as you can see, this alert will be displayed for you with the text that we provided. So hello there. This is one way of how you can include the JavaScript code. And, as I mentioned before, it's known as internal JavaScript. For now, like, it looks pretty easy, right, and fun too. But as the day passes, you will start writing, like, a lot of JavaScript code. And if you start keeping your code in here, later on, it will be long. So it is not recommended using your JavaScript code internally. So for that, we want to have the JavaScript code in a separate file and then call it inside our HTML file. So this is known as external JavaScript, same as we do with CSS, but, of course, we put it in a different place.

So I will create a new file in here, and, basically, you can give it any name. But, usually, we use script, for example, and it needs to have the extension dotjs. So dotjs like this. Let me remove this code from here. K. So nothing is inside here, and I will put that code inside my JavaScript file. When you use the JavaScript file externally, you don't need to write again the script text like you saw it before. You just write the code directly in here, and it will be interpreted as JavaScript code. So we had alert and then hello. There. Hello. There. Like this. I click save. Of course, for the moment, I don't see anything. Let me close this one. The reason is because this file, it's not linked to the index dot HTML, at least not yet. So in order to be able to display this alert, we need to link it with our index. Where do we put it? The same place right before the body tag. So now you say script like this, and you don't use the first option from m at abbreviation, but you use the one with column source. Meaning that, in here, you will need to provide the path of your JavaScript file. In our case, they are on the same level, so you simply say script dot JS. And you see as soon as I type I start typing, it will recommend you to use this one. So I click save. Now I save it. You see that we still got the alert, but this time it's coming from from this file. So keep in mind that there are 2 ways. Basically, maybe if you have a short code or you're just testing or maybe making making it some, exercise some easy exercises, you can use internally.

It's it's not that it's totally bad. But for bigger project or for any project or even for the exam that you will face in the upcoming weeks, we recommend you you that you use it externally. So as a separate file, and then you include it in like, inside the HTML file right before the closing body tag. Okay? Now if you remember from, CSS days, we also showed you how to use the inspect element to view our elements or maybe make, changes temporary so we can check how it looks. In JavaScript, we also have something similar like that, and it is called the console. So if I go if I right click in here and go inspect let me just move this and expand it. So far, we have learned that in here under the elements pane, you can see the structure of your HTML elements, if there are any. But in our case, there is none. Just let me put something in here into our script. K. But you see, we can actually see our elements. And in here, we can put some styles. In JavaScript, like, if you go a tab after, you've got something known as console. Console pretty much will be your best friend when learning JavaScript or we're testing JavaScript. I will show you how. If I go again inside my script dotjs and I remove this alert, I say something like console dot log, and I open the brackets like this. And, basically, I put some text. Again, I will stick to the same text. Hello there. And I click save. You will be able to see it inside the console. Let me zoom in. K? This console will be very useful useful for us to print values to the console so we can see the work that we're doing.

For example, later on, you will see that maybe we will have some calculations, and we're not sure or let's say we want to make sure what the result will be. So before actually displaying on the page, we can try and console log it. Of course, this will not be used when your web page, let's say, it's deployed, but it will be used only for you to test it, to see the values. Okay? So that is why I told you the console log will be your best reviewing the course. Now as we write more JavaScript code, sometimes our own code can actually become, like, very difficult to understand. For this reason, it's often useful to leave notes, let's say, or comments in our code for other developers, but also for ourselves. Right? And as you may already know, we do that by writing comments. In JavaScript, there are, like, 2 types of comments, a single line comment and a multiline comment. For example, a single line comment can look like this. For example, this, I will just say hello there. This will be treated as a comment. And you see, if I save it, you will not be able to actually see it in anywhere. Even if you go inside the elements let me it will not exist anywhere even in the HTML file, but nothing here too because this is a common. Right? Again and this is an inline common. Besides doing it like this, we can also command the whole line. And for that, I use, again, the same key short keyboard shortcut that I use for HTML and CSS. So control plus forward slash. I assume that on Mac, it's also the same, so command plus, forward slash. And, basically, this will command the whole line.

But just so you know, you can do it like this, or you can put a command after. So this is a single line comment. Now there is also the second way of writing comments, and that is a multiline comment. And a multiline comments will be helpful if you have, like, some, lines that you would like to comment. And, yeah, basically, you do that by writing forward slash asterisk sign like this. And let's say this is a comment, something like this, and then you close it with an asterisk again and a com forward slash. So, again, this will be treated as a comment, and it will not exist anywhere nor in the console or in the HTML. Alright? Before moving further, anything any question that you might have? Alright. I know that this this was pretty easy for you, but yeah. Okay. Now let's shift our focus to something important, variables. In programming, a variable is a container for a value. And, basically, you can think of it just like a box with the name on it, or you can put different types of stuff. In JavaScript, there are 3 ways to declare variables. We've got var, let, and const. Each of these has different scoping rules and behaviors, but today, we're just going to introduce them to you. And then in the upcoming days, we are going to talk more in-depth in-depth, like, about the differences between them. So first, I will start with var. So var like this, and then the name of the variable, I will just use my name, and then we set it equal to some value. For example, in my case, it would be Viola. So I'll try to console log this one. My name, I save it, and now I'm able to see, my name con in the console.

So what we did in here, we used the var, which is the keyword that we use to declare variable, then we assigned it a name. This can be basically any name. Then we've got the equal sign, and we set the value. You can use for the value, like, of course, depending on the type. But if it's a text, you can either use double quotation like this or single quotation. Both of them will basically do the same stuff. However, when I click save, the formatter that I'm using, it formatted to use double quotation. But just so you know that even this is valid. Now let's focus a little bit more on VAR. Nowadays, we barely or never use the VAR because remember earlier when I told you there were a lot of difference actually of JavaScript versions, but the major one was the ECMA 6 ECMAScript 6 or ES 6 for short. And that before that version, every variable was declared with var. After e s 6, there were 2 more keywords introduced or 2 new keywords were introduced, and the these are let and const. The the reason is because when using VAR, as I mentioned, you will also see it in the upcoming days, but there were some issues mostly with the scope when you were using VAR. So that is why let and con const were introduced to handle those issue. Basically, again, with the let, it will be the same thing. I can even overwrite it in here. If I, replace this with let, you see the same result. Nothing will change. When using let like, for most of the time, we will use let to declare variables. But just to show you some of its, specifics, when using let, you can also reassign values, to these variables.

What do I mean by that? For example, I can assign a different value to this variable. For example, my name, no. It will be, I don't know, John. And, again, I try to console log my name. You will see that it will actually print John, and there will be no errors. So with let, you can also reassign the values. Another thing that we should be aware of when using let and even why for that matter is that when we declare a variable without assigning a value to it. In such a case, the variable will be automatically initialized with an undefined value. For example, if I say something like let price like this. So I just declared a variable. I didn't assign any value. I try to console log this. You see? No error or anything. But if I try to console log it, you will see that it will print undefined. Meaning that, there in here, it you don't you don't you didn't assign any value. Okay? However, later on, we can actually reassign it. So we first declared it without the value, but later on, we decided we want to put some value. Let's say price, I don't know, 100. And then if you try to console log again, you can. So the first time, it was undefined, but then later on, after you reassigned it, you are actually able to see the value. So with let, you can assign a value, and you can also reassign it. Now besides the let, we also have the const. And as I mentioned before, const keyword also was introduced in the ES 6 version. And, basically, it's a short word for the constant. The way that you declare a count variable and assign a value, it actually follows the same, structure as let and or, but, with some changes.

For example, if I say const pi, the value of pi should be approximately 3.14, and then I try to log pi, everything looks good and basically the same. However, this will be a constant. A constant variable cannot be reassigned. The reason, because it's a constant. So if you try to reassign this constant variable, then you will get a type error. I will show it to you. So if I try in here and say pi equal to 3.15, I try to save it. You see you will get an uncut uncut type error assignment to constant variable. So constant variables must be assigned a value when they are declared. Even if you try to declare a const variable without a value, you will get a syntax error. Just to show it to you, test like this. So I'm assigning a constant variable, low value, and I try to console log it. Test. Let me just remove this one, this error. I click save. You see now there will be a different error. So it's a syntax error. It says mission missing initializer in const declaration. So keep in mind that you cannot, leave a const variable without a value, and you cannot reassign it. Maybe sometimes or let's say you would ask, but where to how to decide where to use let and where to use const? Think about whether you'll need to reassign the variable later on or not. Or to simplify it, like, more simple to make it more simple for you, you can use const for values that won't change. For example, we know the value of that pi. It will not change. And, basically, let for everything else. Okay. So I will remove this one. This. And now we don't have any error.

Now JavaScript supports, like, several data types, but the most common ones are strengths. And we already saw it so far, which are actually used to represent the the textual data. Strings in JavaScript, as you saw it, they can be defined with a double quotation like this or a single quotation. Both of them will work. Let me declare some other value. For example, let greeting greeting. Good morning. Like this. I save, and I try to log it. Again, I will be able to see it. But, of course, if you're not using formatter on save, it should also work with single quotation like this. But for me, as soon as I save it, it is also changing. But yeah. Alright. And, besides the string, we also have the numbers. And as you already know, the numbers are used to represent the numeric data and, basically, how to have a number. You declare variable, let's say, number, and then you set it equal to some number, but without the single or double quotation. And then I try to log it. Number. You are able to see it as a number. Besides, maybe I yeah. If you have noticed here in my console, but probably you will have a white background. But even in a white background, that should be obvious. You see, when it's a number, it has a different color, like, purple or bluish, like, dark bluish, something like that. And when it's a string, it's a simple white. So I know that, we will have other ways of how to determine the type of the variable, but this is only, only, like, another way, let's say, to actually be able to see it. So probably if you're using a white background, it should be black color for the text and blue colors for the numbers.

If you try to console log them, you would be able to see it. Besides the text and the number, we also have the booleans, and booleans are used to represent the logical values, like the true or false. For example I don't know. Let's say it it is is raining. Let's say it's raining now. If we set it to true, then it means that it's actually true. Let's say another variable, let's say, is warm. For the moment, it's not warm, so we set it to false. And if we simply try to console log them, same for the is 1, you should be able to see true and false. Now the when using Boolean, actually, they are used in a variety of ways for but, mostly, they are used in an if statement to control the flow of the program. But, again, we will see that tomorrow and more in the upcoming days. So beside the bullion, we also have null and undefined. You saw an example with undefined, so I will just explain it a a little bit more and the difference between the undefined and null. And, basically, both are used for the absence of the value, but, of course, they have different meanings. Now you saw it from before. I declared a variable, but I didn't initialize it. I didn't give any value. And when I try to console log it, therefore, it print undefined. Undefined means that there should be some value, but it is undefined for the moment. Let's say one example that I like to tear take is, let's say the time the exact time when we will finish the course. We cannot know it from now. Right? So I will call it finish course time. I will leave I will not assign it because I don't know where that will be.

I don't know the exact time. However, I know that after some time, there should be a value inside it. So for the moment, it's undefined, but later on, I can assign a value. So that what, actually undefined means. It doesn't have a value for now, but it can have a value later on. And then we have null, which means that there will be no value here now or will never be in the future. For example, I will just get a simple variable, no value, and set it to null. Let me just console log again this to finish course time and finish the, like, console log, no value. You see, we got undefined and null. Null mean, simply there will be no value at all for this variable. However, the undefined means that for the moment, there is no value, but later on, we can actually put a value inside. So this is the difference between these two. You will probably see them when doing the exercises or even in the upcoming days, but they will, like, you will be able to understand them better when you actually, practice. But just so you know that you might occur them in the future. Okay? Are there any questions so far? Alright. I will remove this part. Like, I will completely delete it, and I will create 2, more variable. This time, I will call it a variable of first name and a variable of last name. So let first name, John, and let last name, I will call it Doke like this. One more thing, before I forget. You see in here because, again, I'm using this formatter on save. Even if I miss semicolon at the end, it will replace it. However, in JavaScript, it is not mandatory to have this semicolon.

However, I recommend that you put it because later on, especially for those of you who will be continuing with back end, you will see that in PHP, the semicolon is mandatory. But just so you know, in JavaScript, this will also work fine. It will not complain if you forget this semicolon. However, that is why I prefer to use a word matter so it will actually format the code for me and avoid the chances for mistake. So now I used I created these, two variables. Let's say I want to, be able to console log both of them. Maybe I would want to have them in a separate variable. Let's say to have a variable name, full name, and then to join them together. Or in JavaScript, we use the term concatenate. Let's declare the variable, so that full name, like this, and set it equal. Instead of putting the values in here, I will put the variables. So first name plus last name. And then if I try to console log the full name, I should be able to see John Dot. So only the values that's coming from these variables. So as you can see, 2 these two variables will be joined. However, there is no space about it. We know that the first between the first name and last name, regular, there should be some space to differentiate them. However, when we try to join it like this, there will be no space. So if we want the space, we need to put it ourself. How can we do that? Basically, there are, different ways. But first, I will, show you the approach with this, plus sign. And then later on, I will show you a different way. So if we want to put some spacing here, we simply use the single or double quotation.

We make a space between, and then we say plus. Meaning that first name plus a little space and then plus the last name. Now if I save it, I got John Doe. K. Just to see yes. I use Prettier. However, I configured it. I will show it to you again. If you go to settings and you search for format like this, you should have option when it says format on save. So make sure that you have that click, like, checked. If you have that checked, it means that whenever you save the file, it will also format it. Right. Okay. So this is one way how to, concatenate strengths. As I told you before, there is also another approach, and, that actually came up with the ES 6 version, and it's called template literals. And, basically, we wrap everything inside backticks. What is a backtick? If you check your keyboard, the backtick character, it's let me just show it to you. It's this one. Now keep in mind, it's not a single it's not like this or like this, but it is like this. Let me zoom in a little so you see it better. And if you check the keyboard, it is usually located just above the tab key and to the left of the first one number on the key 1 numb key 1 yeah. On the keyboard. Basically, on most of the of the of the short of the keyboard. But if you are unable to find it, of course, we can check it after. Because sometimes, you might use a different language and so, and maybe it's it is just located in a different place. But, usually, it's on the left of the one key. So it's this is called back tick.

Okay? And I believe like this. Close this one. How can we, concatenate a string using the template literals is easy as this. So I will just, yeah, I will leave it like this. And then after, I will just reassign the same variable, but just so you see the different approach of string concatenation. So, again, the backticks. And then to actually include the variables or the value from the variables, we say dollar sign, and then we open the curly braces like this. And then inside, we put the name of the variable, which is first name. If we want the space, we simply say space, the space bar, and then the other variable, which is last name, like this. Let me try to console log again, full name. You will see the same result. Nothing will change. So it's either this approach or this one. Okay. Let's also declare another variable now. Let's say I want I will do it in here. I will declare an age. Age. Let's assign it to 30. And let's say I want to, modify my message, or let's create a new message, actually, because I haven't created yet. So message variable. Let's say I want to say something like, hello. My name is John Doe, and I am 13 years old. And I want to do that using the back ticks. Maybe I can also show you using the plus operator, but me, personally, I find it much easier to use the template literals for concatenating the strengths. Again, we open the backticks, and now if we want to write some text or something that's not coming from a variable, we simply write it as, like, regular. I am or how did I say? Hello. My name is now the John value should come from the first name.

So we open the we put the dollar sign. We open the curly braces. First name and last name, or we can also extract that from the full name. But just to show it to you, last name. So hello. My name is John Doe. These two variables will actually print the value. And I am, let's say, 30 years old, but that 30 value should come from the age. So I say, dollar sign, age, 30 years old. Like this. I try to console log it. Message. You see that I will get what I wanted. So hello. My name is John and are the values that's coming from the first name and last name. And I am 30. It's coming from the age and, basically, years old. It's just a static. Yes. So this is when using, template literal laterals. Just to show it to you how it will be using the plus operator, message equal. So hello. My name is then if we want to have the value from the first name plus first name no. Dollar sign, first name, plus last name, plus, again, n I m plus h plus years old. I save it. You see? Let me just console log this one and this one too. You see, they will actually look the same. However, we forgot to put the spaces in between. When you have a string like this, you can also do it just a space like this. But, again, then we have John Doe in here. We would need to put a space on its own. So, yeah, I'm formatting, and it's just changing the order. And then we also need a space in here. So I can even put it like this or actually put a space with, as I did from as in here.

And, again, the same for the years old. So what do you think? Which approach would be easier? This one or this one? That is why I prefer to use the back ticks, and it actually keeps your code more cleaner, and you are actually able to read it. Okay? But just so you know that both ways will actually work. K? Any questions so far? Yes. Basically, inside the space, you can put anything. You can put a comma. This will be just a string. Although it doesn't make sense to put the comment here, but just to show it to you. Alright. Now JavaScript also provide a number of string methods and properties that we can use. For example, I can show you the length property if I try to say console log. Let's say first name first name dot length. This will provide the amount of, characters that I've got inside stored inside my first name. And as you can see, it will show you 4 because there are 4 characters. However, the length property will also count the empty spaces. For example, if I put a space in here and I click save, you see now it will show you 5. So 1, 2, 3, 4, and this is a 5. So just be aware of that. But you will find it pretty useful, especially when we learn about arrays. Then I can also show you the, 2 uppercase. Just so you know, there are plenty of methods. So, of course, I will not cover all of them, but only some of them. But if you want to explore more, you can always check the documentation about it. Let's see. To uppercase like this and save. You see this will turn John into uppercase. Then we have the opposite to lowercase.

I just change it in here. It will convert it to lower characters. Then what else I can show you? Guess we've got the char char at. If I try let me just console log again. Again, I will use the first name. Let's say if I want to, find the character or, let's say, one character from that variable, I can use the charAt, which is a method that you would need to pass the index of the string as an argument, and then it will actually return the character based on that specified index. So first name, char at It's this. And then in here, you put the index. Let's say index of 2. It will bring you age. Now you might check first name. Okay? It is John, and you're saying index of 2 shouldn't shouldn't, print the o. O is the second one. When you use the charAt, you would need to think that this is 0 index. It means that it will count from 0. So j will be 0, o will be 1, and h will be 2. So when we start using the index, you will also see especially when we come to the arrays, keep in mind that they will start from the 0. 012. So the 2 will bring me h. Then we can actually do the opposite. We can provide the character, and then it can bring you the index. And for that, I can use the index of method. First name dot index of this one. And let's say again, we actually know for the 2, but let's say let's see if that will bring me 2. If we provide h in here, you see, it will bring me to. Let me John Doe. Yeah. Let me try the full name just to show you something.

Full name. And this time, I want to bring me the old because I know that I've got yeah. Let me just see. Yeah. We've got it in here. So John Doe, it's bringing me 1. Why it's 1? Because it is finding this o. And as I told you, we've got 1. Therefore, it shows you the first index. However, in our text, there are 2 o's. So keep in mind that when you use the index of, it will only bring you the index of the first character that it finds, not the second one, even there if there are more than 1. So, yeah, pretty much these are some of the methods that you can play around and actually use them. Maybe I will also show you the split. And split will basically split the string into an array of substring. Again, that will be dependent on the argument that you passed. For example, I will use this message that I have in here, log a message dot split. You know how the message looks like. It's a string. But if I say mess message dot split, and in here, basically, I can provide any argument. Let's say a comma. If I save it, this it will be how it will look like. Let me just remove this comma. Yeah. It will basically split it into a a one character. But, again, in here, you can provide any argument for because I didn't have a comma before. I was actually be able to see the same stuff. However, if I change my message where was it? I will change this one because it's much easier. Let's say hello. I put a comma in here. My name is John Doe. I put a comma in here, and I am I will put a comma in here.

Now I click save. One moment. Yeah. I would need to remove this one because it's messing with me. You see now that will be split based on this comma, meaning that whenever there is a comma, that will be split as an element. And as you see differently, but it trust me. It will make more sense when we learn the arrays. This looks different than when we try to console log it in here. It's not the same. It you can also expand it. And, basically, it's an array. But, yeah, as I told you, it will make more sense when we actually cover the arrays. But just so you know, this might be a a helpful method that you can use later on. Now there is I will just show you the type conversion, and then maybe we can have a short break. In JavaScript, there is also an operator, which is called type of that is actually used to deter determine the data type of the value or of the variable. For example, if I say something like console log type of first name first name, you will see that this will bring me string. If I say the same of age, you see this will bring me number. Maybe for now, it's easy to know because you were already console logging. And remember, I showed you a different rig that we can see if it's a string and if it's a number. But later on, especially, when you are checking for something, you might use the type of. And, just so you know, in JavaScript, we can also convert a value from number to a string, either manually or automatically, or sometimes known as explicit or implicit conversion. Implicit means automatically conversion. And what do I mean by that?

Just to show it to you. In a certain situation, JavaScript will automatically convert 1 data type to another. This is known as implicit. And if we got for example, I will declare a variable in here, and I will assign it to a number that it's actually a string. So to a string, basically, plus 2. Like this. If I try to console log the result, you will see that this will bring me 32, and it will not add them. So it will not be something like 5. The reason is because, when a number is added to the string, JavaScript will convert the number to the string before, concatenation. However, if you try to subtract it let me copy this one and paste it over here. So I put minus. I console log the result. You will see that I will get 1. What does this mean? These 2 have been subtracted. So when a number is added to the string, it will simply treat it or console log it in our case as a string. It will concatenate it. However, when you try to minus or to subtract it number from the string, it will actually subtract it, so convert it to a number. And even if you see in here, you see this is in white. It's a string, this one. And this is a purple, which means it's a number. So, again, keep in mind, when a number is added to the string, it will be converted to a string. However, when you subtract it, it will be converted to a number. Maybe just to show you an different example, if you have, let's say, 2 strings, so without a number, hello, minus world, like, something like this, Of course, this will not be converted to a number.

However, you will see something like none. None mean not a number. So you're trying to subtract them, but they're not numbers. But just so you know, because later on, you might face situation like this. So this is how will JavaScript behave. These are the implicit or the automatic conversion. Then as I told you, we also have the manual conversion or the conversion. You can convert your, data types, as per your needs. And for example, let's say we've got a string, and I will make it a string, but, actually, it will hold the number. And let's say I will declare another variable. You can use different methods like parse int parse int to actually convert this to a number. Now if I try to console log it, you see that this will be 15. Let me show you the console log before converting to a number. Cannot access numb yeah. Because STR in here. You see? This is a string, and I use the parse end to actually convert it to a number. So I try to console log it. Now it's a number. So this is, like, a manual conversion. If you need to act as a number, but, yeah, you provided as a string that you can do it using different methods. One of them is. You can also use the number. Number. No number. This one. You see? Nothing will change. The difference between them is just that the parse end will only extract the whole number, the whole number part. For example, if in here you've got 15 point something, when I use number, you are able to see it. However, when you use parse and you should be able only to see the whole number. You see? It's only 15. So So this is the difference between them.

Depending on your needs, you can use either one of them. And then if you want to, actually convert from a number to a string, you can use the string method. Let's say, num. I will just reassign it to some number, 30. And then let's say, let's s t r one. I will call it string method. You provide this num, and you try to console log. Come on. Log. SCR 1. Let's see why it's not console logging. S u r 1 string numb. Yeah. Let me declare it as a different number. Maybe it's interfering somehow that note 1, you see, you should be able to get 30. But now it's a string. You declared it as a number. You use the string method to convert it to a string, and therefore, you see it as a string. There are also some, naming rules, let's say, or, conventions how to use variables. And, also, some reserved words that you would need to be aware of to not use when you create variables. But just a quick overview. I know that we also mentioned that in the prework. Keep in mind that variables cannot start with numbers. You cannot declare variables like this. 1, no. It will bring you an error. You see? Even while I'm typing, it will show you an error. So it cannot start with a number. They can begin with a letter, either lowercase or uppercase. They can begin with an underscore or even with dollar sign. But I would not recommend to use the dollar sign because later on, we will use that to actually declare variables for PHP. But just so you know, you can actually declare a variable using a dollar sign too. These names can contains letters, can contain numbers, 123, can also contain underscore like this, and also other characters like dollar sign.

But I would recommend that you keep your name simple and meaningful to what they're going to present. So later on, it will actually be user for also you to, reuse them or to know what you call them. And keep in mind that names are also case sensitive. What do I mean by that? If I have in here a variable, I will call it favorite fruit. Let's say apple. And if I got another variable like this, favorite fruit, but this time, I will make this f lowercase to an orange. These will be treated as 2 different variables. Okay? If I try to console log them, favorite fruit, and, again, the favorite fruit with lowercase, you see 2 different variables. So keep in mind that the names are case sensitive. When when you have, like, a variable that you feel that it should contain more than one word, like, for example, in our case, it's not a fruit, but it's a favorite fruit, then we use some convention. For example, this one is called camel case. So you start the first word with the lowercase, then when it comes to the next one, you the first letter should be uppercase. Come on. This one. So this convention is known camel case, and I would recommend that you also stick to this convention whenever you feel that you have more than one word to create a variable. As I told you before, it's also important to be aware of the reserved words in JavaScript, And, reserved word are keywords that actually have special meanings in JavaScript, and they cannot be used as identifiers. So you cannot use them to actually create a variable or even a function later on. For example, the function keyword itself, it's a reserved word that you will see that more in the upcoming days that you're gonna need it to use it whenever you want to create a function.

So you cannot have a variable with that name, something like this. Why? Because this is reserved words. But, again, for the full list, you can always check the documentation. But just be aware of these rules, let's say, that I mentioned when you want to declare the variables. Try to keep it simple, short, and meaningful to what they're going to represent. And if you manage to do that, then you're good to go. If you have more than one word, then you can use the camel case convention. Alright? Yeah. Pretty much that was all about the naming rules. And so, are there any questions? Yeah. Usually, with practice, you will be able to to understand the, behavior of JavaScript, how it will behave in certain situation, but that, of course, will come in time. You will not be able to learn everything in one day. So try to start easier, and then we will go to more harder stuff. And so okay. I will give you a short break now. K. So now let's continue to another topic. Till now we saw that, all our variables that we declared, were holding only a single value at a time. However, there might be situations where we need to store and work with multiple values together. For example, imagine if we want to store the grades of all the students in a class. Instead of creating separate variables for each student's grade, which is not so good. In this case, we can use, what we call an array to hold all the grades in one place. And, basically, an array is just a collection of value of, values just like the variables, but it can hold multiple values at once. Now I will, again, comment it or remove everything that I've got in here just so we can have a clean console.

And just to let you know, between today and tomorrow, actually, we will only use console for show displaying things. Then later on, we will see how we can manipulate stuff and to actually display them in the browser. But yeah. So in here, I will just put array so we know that it's a different topic. And to declare an array, there are basically different ways of how to do that. But the most common one that we use is the one using the square brackets. For example, I made the example about the grades. Let grades, so the same as we did so far, equal to instead a value, we open the square brackets like this. And then inside here, we put all the grades that we want. Let's make it points this time. I will make it 70. I don't know. 90, 88, 92, and maybe 76. Something like this. Yeah. So I, save it. Let me try to console log it. Great. I save. You will see how it will look. Remember when I showed you the split method, it actually looked similar to this. The reason is because that was actually an array. So arrays, they function almost the same as variables, but instead of holding one value, they can hold multiple values at a time. And you will also need to put this square brackets like this. And even in the console, they will look a little bit different. You will see in here that you will also have the option to expand. And if you expand them, you can actually see all of them. And you will also be able to see the length property. Even if I type it in here, grades dot length, it should also bring you the length of your current array, meaning that in your array, there are 5 elements.

Now let's focus on something important. As you saw it in here, these numbers will be called element, and each element will hold an index. Arrays are 0 index. What does that mean? They will start from 0. So if you want to retrieve the 70, so the first number, you will need to provide the arrays names and with the index of 0. Meaning, this 70 is z at the 0 index. So I will just put it as a common thing here, and they will put it like this. 0. And then this is 1. This is 2. This is 3, and this is 4. So keep in mind, because this is very important, that arrays are a 0 index. They start from 0. Now if you want to access an element from the array, then you can use that index. Again, let's pick one number in here. Let's say I want to retrieve this number. So I say grades, the name of the array, and then I open the square brackets like this, like this, come on. Grades. And then I specify the index. To retrieve the 88, I put the index of 2. I click save. You see, this will bring me 88. If I change it to 4, this will bring me to the last element. So keep in mind, to access the elements, you need to provide the right index. They start from 0. You can also modify an the value of an element in an array by using this index. For example, let's say, I will change maybe this 88 to a different number, let's say, 275. How can I do that? Again, the name of the array, you open the square brackets, you pass the index. So 88 is an element with an index of 2, and then you set it equal to basically a different number.

Let's say, 75. Now you try to console log the grades array again. You see the 88 will be replaced with 75, so with your new value. Now, let's also declare another array, but this time, I'm going to use const. So I will declare an array of colors using the const, not the left keyword. Colors. And I will basically just quote some colors. Red, white, and yellow. These will be strings, so keep in mind they need to be under single or double quotation. If I try to log them, colors, I'm able to see them. Okay. So far so good. Now earlier we said or let's say, when we learned variables, I mentioned that variables declared with const keyword cannot be reassigned while variables let with sorry. While variables declared with let can actually be re reassigned. However, the items in an array declared with const are mutable, or mutable means can be changed. This means specifically that we can modify the individual elements within an array, such as, for example, changing the, element's value or maybe even adding a new element. However, keep in mind that when we use cons in an array, we cannot reassign the entire array to a new value. I will show you what I mean. If I want to do something like this, colors equal to some new colors. Green. But the time didn't include brown. And so I click save. You see, it will show me an error. So I cannot give a completely entire array to the colors that are declared with cons or to any variable declared with cons. However, I can I can change a single value? For example, if I say like this, colors at, I don't know, position 1. So instead of white, I want to make it green.

Save. It will be changed, and there will be no error. So keep in mind, even if that is declared with cons. So I can change them 1 by 1 like this when I use cons, but I cannot reassign the whole array to a completely whole let's say, a different array as you saw it. It will give me an error. But instead, you can modify it like this. Okay? And now you know with let, you can actually reassign it to a different array. But with const, usually, this is the difference when actually declaring a variable and an array. In a variable, when you declared it with const, you cannot change it in any way. However, in an array, you can change individual elements when you declare this array with const. However, you cannot reassign it to a whole new array. Okay? Before moving to another topic or let's say before moving to the array methods, I also want to show you that the arrays actually can contain other arrays as element or known as multidimensional arrays. For example, I will create a 2 dimensional array. Let's say to represent a matrix. So I will use the const metrics. So this is an array. And then inside, I also want to declare some other arrays. I will just put some number to make it easier. So 1, 2, 3, 4, and 3 1, 2, 3, 4, and 5, 6. Like this. I try to lock this one. Matrix. You see? This is how it will look like. So it's there are arrays inside an array. And if I try to expand it, you see, I will have 2 things to actually expand. So the first array and then the inner one, the second one. If I want to retrieve specific element, let's say we want to return this 4, How can we do that?

We go from here, and we check this. Like, if I put this on one line, we'll try to do it like this and not save it because my formatter will do it for me. So like this. And if I try to put the indexes here I think I would need to use the tab is not working. I add only the space. So this will be the first element inside my array. This will be the second, and this will be the third. So if I'm about to put the index in here, this will have the 0 index. This will have the 1st index 1 index, and this will have the 2 index. If I want to retrieve 4, I would need to go to the 1st index to only retrieve this one. So let's try and do that. We open the square brackets 1. I click save. You see now it only bringing me this element, which is actually another array. Now if I want to go deeper so to bring 4, again, I would need to use its index. Since we only got 2 elements in here, we start from 0. This is positioned at index 1. So I make another square brackets in here, and I say 1. I click save. This will bring me the element that I want. K. Yeah. About the types, for now, we are still at JavaScript, and, basically, you can have an array of numbers. You can have an array of strings, or you can also have a mix match. Let me show it to you. Let's say let some array. I open it like this. Test. This one, I want to be a number. This one can be a Boolean value. This one, another string and so on.

If I try to log it now, some array. I'm able to see them, and it will work just fine. So there are different types of types in JavaScript. We can do that. However, later on in TypeScript, you will see that we can actually restrict that run array to have maybe only types of strings and not numbers or vice versa. But, yeah, in JavaScript, you can basically do anything you want. You can also mix and match them. I'm not sure, like, what example to give you is in order to remember. I think only by practice, they will come along, but I will not I will say to not stress too much about it today. Barely will need it. Usually yeah. We will see something similar when we go to the loops, but don't stress about it for now. It will come up, like, with practice. Alright. Now let's continue to some JavaScript method. And, basically, this is where the fun comes on. So I will command this part and this one too. I don't need it. Although I will leave the colors. Yeah. I will leave the colors, only the colors. We know that we declared this array of colors, and we can see 3 colors for now. Now JavaScript provide many methods for working with arrays, such as pop push. And push, it's used to actually add an element, to the end of array or pop to remove the element and, actually, many more. But I will just, take some, examples that you will actually face it also in the future. The first one that I want to show you is the push. And as I told you, this will be to add 1 more element or more more than one element to the end of an array.

How can we do that? You simply provide the name of the arrays, so colors dot push, and you open the brackets like this. In here, you can provide, the elements that you want to add. And you see it can only be an element or more elements, more than 1. In our case, I will just put it one color. Let's say purple. And now if I try to log the colors again, colors, you will see that the purple will be added to the end of array. So keep in mind, push will add a new element to the end of an array. You can also I will just show it to you how we can add multiple elements, and then I will remove I will continue to the next method. Let's say I also want to add 2 more colors. Let's say, what do we have? Red, white, yellow, green, actually, purple, blue and orange, maybe. So colors dot push. And instead of providing one element in here, you simply you simply provide 2. Blue. Come on. Blue. And what did I say? Orange. Like this. And, again, I try to console log it. Colors. You see now both of them will be added to the end of array. So with push, you can even provide either provide one element or more than one element. The next method that we're gonna see, it's the pop. And pop is used to remove the last element from an array, and it actually returns that, elements. If I say colors dot pop like this, I don't need to provide any argument in here. And I try to console log the colors again. You will see that before I had orange, I used pop. Now orange is gone. So blue is the is the last one.

If you want, we can also save it, like, in a separate variable. Let's say, let removed element. I will leave it like this. So now it's saved in a different variable. Maybe later on, you would need to use it or maybe compare it with something. But just so you know that you can do that. And if you try to console log it, it will bring you the element that has been removed. So it's orange. So, again, keep in mind, push for adding elements at the end of your array. Pop, it will remove the last element. Pop doesn't need any argument. K? So now we see that how we can remove and actually add the elements using pop and, bush, but, actually, they only added or removed from the end of the array. Let's see how we can add and remove elements from the beginning of the array. Let's say we want to remove red or maybe to add another element before red. How can we do that? There are 2 more methods that that we can use, and the first one is the on shift. And, basically, on shift will be used to add the element to the beginning of array. Let's say I want to add one more color. So colors dot shift, and I will use beige like this. And I try to console log the colors again, you will see that beige will be added. But this time, it's at the beginning of the array, so before red. And if you want to remove it, like the first element, then you can use the opposite shift, colors dot shift. No argument needs to be provided. So, again, console log, colors. You see, now everything is back how it was. So, again, on shift will add it to the beginning of the array.

Shift will remove the first element from the beginning of the array. So keep in mind, basically, these 2 are the opposite of push and pop. K. Before continuing further, are there any questions? Yes. Now we will see how we can actually dive a little bit more deeper and how to remove certain elements because these methods, as you saw it, once will remove from the start, and the others will remove from the end. But let's say we also want to be able to maybe remove the second or the third element. How can we do that? So let's take first, I will show you the splice method. And keep in mind, because after it, it will be the splice method with a p. So they might look similar, but they will act differently. The first one, it's the slice, and slice will basically extract a portion of your array, but without modifying your original array. I will show it to you how. I will take a different example now because I think it's enough with the colors. So I will take fruits, and maybe I will command it. I will also command the rest of it because I will not need it. So we have fresh console. So I will declare a new variable fruits, and this will be an array. Let's say apple, banana, banana. No. I don't know. Lemon. Yuvi, and I will also have orange here because I want to make an extraction or range like this. So this is an array of fruits just to show it again inside the console. Fruits. Fruits. There we go. We have it. We can see it. Everything still fine. Now let's say you see from this array, lemon and orange, let's say, since these are citrus fruits, I want somehow to collect like them in a different array.

So I want to extract them somewhere and then to actually save it in a different array. So to create another array from this one, depending their category. For that, I will declare a variable, and I will call it citrus citrus fruits or citrus only, and then fruits dot slice. So remember slice without a p like this. And this method will actually take 2 argument. The first one, it's the start index, which, specify the index of the element at which to begin the extraction. And the second one will be the end index or, let's say, the index where you want to stop that extraction. As I told you, we want only lemon and orange to be extracted from this array. So therefore, we go we have 01, 2. So the start index will be 2. So I put in here 2. Remember again, arrays are 0 index. 012. So I want to start from the second index. Then the second argument will be, where do you want or let's say, which index should this extraction end? So in here, we got 2, and then we got 3. We want to end it till here, meaning that I want to take orange, but I want to stop it. Give it. Because give it, let's say, it's not citrus. So then I provide in here 4. Again, how I count them? 0, 1, 2. So I want to start from 2 and then 3, 4. I want to finish at 4. Now if I try to log come on. Log citrus, I'm able to see only the lemon and orange. So using slice, we extracted 2 elements from the middle of an array. The first argument, you will need to specify the start index. The second one, you would need to specify the end index.

And the most important thing, if I try to console log the fruits array come on. You will see that it will not change. Nothing changed. So the slice didn't modify the original array. It only took something from it. Instead, we save it in a separate variable. Therefore, we are trying to console log to see those element. So slice, it's very nice method that you can use if you don't want to, modify the original array. Okay? Now another method that actually gives you more control or adding, removing, or changing the element, it's the splice method. You see, slice and splice, almost they are they they sound the same, but, actually, they are different. So I will show you how. Splice is, again, another building, method in JavaScript that can be used to add elements to an array basically everywhere inside your array, not as we saw it from the before with the on shift or push to remove the elements or even replacing the existing elements with other new ones. And the splice actually modifies the original array. Okay? So let's say, from here so we've got the fruits now. Let's say I want to remove the lemon from here. It's in the middle. Right? How can I do that using splice? Simply again fruits dot splice. I open the brackets. Now keep in mind, the splice method can take up 1 to 3 parameters. The first one will be the index where you want to start modifying the array. The second will be the number of elements you want to remove. And the 3rd argument, you can specify the elements that you want to add to this array, if there are n, of course. But in our case, we only want to remove an element, so we don't want to be replaced with another element.

We will see that later. But for now, I just want to remove it. So, again, I need only 2 arguments. Even if I hover through it, you see that it will, give you a short description of what it actually does. But, yeah, the first argument, as I told you, is the index where we want to start. So let's go again. We said we want to remove Lemon. So where do we want, from which index we want to start this extraction or which element we want to start to remove? We've got 0, 12. So, again, starting from the index of 2. So in here, I provide 2, comma, and then the second element, you see, even after I type comma very good. Yeah. I see that that you already wrote it on chat. You see, after I write the comma, it will bring me this description. So what the l m what the second argument or what the second parameter should be. In here, it says that you would need to write the number of elements to remove. So starting from here, how many elements you want to remove? We only want one element. Right? Perfect. So we we put the one in here. Now let's try to actually log the fruits array. You see now the lemon will be gone. And as I told you before, splice differently from splice, it will actually modify the original array. I try to console log fruits again, it will be without the lemon inside it. Okay? Let's say, we also want to replace a fruit with another fruit using this, splice method. Let's say in here, I don't know, instead of orange, I want to have pineapple. So I want to remove the orange. Instead of it, I want to add the pineapple.

How can I do that? Fruits.splice. What index should I provide in here? You can write it on chat. So, again, I want to replace orange with the pineapple. Which index should I start? Again, you go 012. So starting from 2. Right? And then the second one is the number of the elements to remove, which, again, it's the same because we want to remove orange, so we set 1. And then, pay attention to the description. As soon as I type comma, in here, it will actually, ask you for the 3rd parameter. Now what do you want to add? Remember, if we have 2 parameter, it will only remove the element. However, if we if we provide the 3rd parameter, that it means that that element or that value will be added. So in here, I open the single quotation or double, and I add the new value, new value. I'm well, if I spelled that correctly. K. Let's try to console log it again. Roots. Roots. You see now instead of orange, we got pineapple. You see how fun is experimenting with splice? So we removed orange, and we replace it with pineapple. Let's say let's take another example with, this one. Let's say I want to add 2 more fruits after the pineapple, but before kiwi. So I don't want to remove any element. I just want to add 2 more fruits right in here. So after the pineapple and before the kiwi. What should I write? Can you help me with that? So fruits dot slice. And then what is the starting index? 3. Perfect. How many elements do you want to remove? Do we want to remove any elements? 0. We don't want to remove any elements. Perfect. Great. Now the next two elements that we want to add, let's say I want to add 2 more fruits.

I don't know. Cherry, maybe. So cherry. And what can I add? Watermelon, maybe. Watermelon. Let me try to console log it. Fruits. I save you see 2 new fruits will be added after the pineapple, but before giving. And not any element will not be removed. Why? Because we specify the index of 0. So there are multiple ways of how you can play around with splice, but, basically, you can achieve everything. And it gives you a lot of control to do that. Of course, there are numerous of different JavaScripts that are used for different purpose. Again, to explain you all of those will take a lot of time. These were some of them. Maybe also one more that you will actually face it in the upcoming days is the sort method. And the sort methods, it's actually used to sort the elements of the array. However, it quantifies the original array, and it sorts the elements in alphabetical order and ascending order by default. However, you can change that. For example, if I say console log fruits dot sort like this, I save it. You will see that they will be sorted alpha alphabetically in ascending order. Keep in mind that the sort method doesn't take any argument. However, you can pass inside a function as an optional argument, to define how do you want to sort your elements. But, of course, I will not do that today, maybe later on. But just so you know, this doesn't accept any argument. Only it can have a function inside, but we will take some example later on. And maybe also the join, I can show it to you, and this will actually be the last one. And join is used to return the array as a string.

If I say console log roots.join like this, I save. Before, you see this was an array. Now it's a string. Remember, in white, whenever you have it in white, it should be a string. The join can have arguments, but if you don't specify any argument, it will assume that the default separator is a comma. You see a comma inside it? However, you can modify it and, let's say, add a different separator. For example, let's say I want to add minus. I click save. This is is, this it will be how it will look like. You can put different characters. Just so you know that with join, you can return a string from an array. Let me just see. Splice. No. Like, when you, for the start index, when you use splice, you start with 0. However, the second argument is the number of the elements that you want to remove. Okay? So it's not the starting index or the ending index. This is the number of the elements that you want to remove. Basically, you make this question to yourself. How many elements do I want to remove? In this case, it's only 1. However, for the start index, again, we're, 0 indexed. I can't remember this one where we add the pineapple. It should be this 1. No. This 1. So we've got 01 2. You see where I pointed 2? I want to remove 1. So I wanted to remove orange. So only one element. And then the third argument, I provided the value that I want to replace. So when you use splice, again, you have 0 index. You start from 0. Alright. Any other questions? You're welcome. And if there is no other question, then that was all for today. Yes.

They will work on different arrays, but depending because when you have dimensional arrays, you would need to use a loop. And you cannot use, like, directly the shift or on shift, for example, if you want to remove more inner elements. They will work if you want to remove, for example, if you have a multidimensional array or array inside an array, they will remove the last element or the first element, but that should be the whole nested array that is inside. If you want to be more specific for the element that it's next step inside the inner array, then you would need to run a loop. K. Just to read. A million. How do you mean, like, index started 0 and the index started 5? Do we do it in the same line code or another line of code? I don't understand, the question. Ah, you mean you want to remove 2 different elements regarding the order? You would need like, using these methods, you will need to do them separately. However, in JavaScript, there are multiple ways to achieve the same stuff, and we will cover that later. Splice is 3 comma 0. It will start from the 3rd, from the second. You mentioned the index of 3. So it means for the from the 4th element, and it will not remove anything. The 3rd although in this case, you would also need to provide another additional argument to provide the values that you want to actually add there. Because if you set 0, then it will not remove anything. We will see how to extract the input values usually from a form, but I think we will see that tomorrow. Perfect. Okay then. Again, that was all for today. I wish you all a nice day, and talk later.